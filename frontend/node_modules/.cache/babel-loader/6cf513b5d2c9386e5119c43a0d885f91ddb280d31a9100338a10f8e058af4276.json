{"ast":null,"code":"// src/services/api.js\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\nconst api = {\n  // Get upcoming games\n  getUpcomingGames: async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/games`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Failed to fetch upcoming games');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('API error:', error);\n      throw error;\n    }\n  },\n  // Predict optimal parlay\n  predictParlay: async (parlaySize = 3, minConfidence = 0.6) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/predict-parlay`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          parlay_size: parlaySize,\n          min_confidence: minConfidence\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Failed to predict parlay');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('API error:', error);\n      throw error;\n    }\n  },\n  // Get parlay history\n  getParlayHistory: async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/parlay-history`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Failed to fetch parlay history');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('API error:', error);\n      throw error;\n    }\n  },\n  // Refresh data\n  refreshData: async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/refresh-data`, {\n        method: 'POST'\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Failed to refresh data');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('API error:', error);\n      throw error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","api","getUpcomingGames","response","fetch","ok","errorData","json","Error","detail","error","console","predictParlay","parlaySize","minConfidence","method","headers","body","JSON","stringify","parlay_size","min_confidence","getParlayHistory","refreshData"],"sources":["C:/Users/rt/nba-parlay-predictor/frontend/src/services/api.js"],"sourcesContent":["// src/services/api.js\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\r\n\r\nconst api = {\r\n  // Get upcoming games\r\n  getUpcomingGames: async () => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/games`);\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || 'Failed to fetch upcoming games');\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('API error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Predict optimal parlay\r\n  predictParlay: async (parlaySize = 3, minConfidence = 0.6) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/predict-parlay`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          parlay_size: parlaySize,\r\n          min_confidence: minConfidence,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || 'Failed to predict parlay');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('API error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get parlay history\r\n  getParlayHistory: async () => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/parlay-history`);\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || 'Failed to fetch parlay history');\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('API error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Refresh data\r\n  refreshData: async () => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/refresh-data`, {\r\n        method: 'POST',\r\n      });\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || 'Failed to refresh data');\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('API error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}