{"ast":null,"code":"// src/services/api.js\nconst API_BASE_URL = 'http://localhost:8000/api';\nclass ApiService {\n  constructor(baseUrl) {\n    this.baseUrl = baseUrl;\n  }\n  async fetchJson(endpoint, options = {}) {\n    const url = this.baseUrl + endpoint;\n    console.log(\"API Request: \" + (options.method || 'GET') + \" \" + url);\n    try {\n      const response = await fetch(url, {\n        ...options,\n        headers: {\n          'Content-Type': 'application/json',\n          ...options.headers\n        }\n      });\n      console.log(\"Response status: \" + response.status + \" \" + response.statusText);\n\n      // For non-2xx responses, try to parse error message\n      if (!response.ok) {\n        let errorMessage = \"API Error: \" + response.status + \" \" + response.statusText;\n        try {\n          const errorData = await response.json();\n          errorMessage = errorData.detail || errorData.message || errorMessage;\n        } catch (e) {\n          // If JSON parsing fails, try to get text\n          try {\n            const errorText = await response.text();\n            if (errorText) errorMessage += \" - \" + errorText;\n          } catch (textError) {\n            // Ignore text parsing errors\n          }\n        }\n        console.error(errorMessage);\n        throw new Error(errorMessage);\n      }\n\n      // For empty responses (like 204 No Content)\n      if (response.status === 204) {\n        return null;\n      }\n\n      // Parse JSON response\n      const data = await response.json();\n      console.log('Response data:', data);\n      return data;\n    } catch (error) {\n      if (error.message.includes('Failed to fetch')) {\n        console.error(\"Network error connecting to \" + url + \". Is the server running?\");\n        throw new Error(\"Cannot connect to API server. Please check if the backend is running.\");\n      }\n      console.error(\"API Error for \" + url + \":\", error);\n      throw error;\n    }\n  }\n\n  // Get upcoming games\n  async getUpcomingGames() {\n    try {\n      const games = await this.fetchJson('/games');\n\n      // Validate that we got an array\n      if (!Array.isArray(games)) {\n        console.error('Expected games array, got:', games);\n        return []; // Return empty array as fallback\n      }\n      return games;\n    } catch (error) {\n      console.error('Error getting upcoming games:', error);\n      return []; // Return empty array to prevent UI errors\n    }\n  }\n\n  // Predict optimal parlay\n  async predictParlay(parlaySize = 3, minConfidence = 0.6) {\n    try {\n      return await this.fetchJson('/predict-parlay', {\n        method: 'POST',\n        body: JSON.stringify({\n          parlay_size: parlaySize,\n          min_confidence: minConfidence\n        })\n      });\n    } catch (error) {\n      console.error('Error predicting parlay:', error);\n      throw error;\n    }\n  }\n\n  // Get parlay history\n  async getParlayHistory() {\n    try {\n      const history = await this.fetchJson('/parlay-history');\n\n      // Validate that we got an array\n      if (!Array.isArray(history)) {\n        console.error('Expected history array, got:', history);\n        return []; // Return empty array as fallback\n      }\n      return history;\n    } catch (error) {\n      console.error('Error getting parlay history:', error);\n      return []; // Return empty array to prevent UI errors\n    }\n  }\n\n  // Refresh data\n  async refreshData() {\n    try {\n      return await this.fetchJson('/refresh-data', {\n        method: 'POST'\n      });\n    } catch (error) {\n      console.error('Error refreshing data:', error);\n      throw error;\n    }\n  }\n\n  // Generate mock data for development/testing\n  getMockGames() {\n    console.log('Generating mock games data for development');\n    const teams = [\"LAL\", \"BOS\", \"GSW\", \"MIL\", \"PHX\", \"PHI\", \"BKN\", \"DEN\", \"LAC\", \"MIA\", \"DAL\", \"ATL\", \"CHI\", \"TOR\", \"CLE\", \"NYK\"];\n    const mockGames = [];\n    const today = new Date();\n    for (let i = 0; i < 8; i++) {\n      // Get two random different teams\n      const homeIdx = Math.floor(Math.random() * teams.length);\n      let awayIdx;\n      do {\n        awayIdx = Math.floor(Math.random() * teams.length);\n      } while (awayIdx === homeIdx);\n      const homeTeam = teams[homeIdx];\n      const awayTeam = teams[awayIdx];\n\n      // Random game date within the next week\n      const gameDate = new Date(today);\n      gameDate.setDate(today.getDate() + Math.floor(Math.random() * 7) + 1);\n      mockGames.push({\n        GameID: \"mock-\" + (i + 1),\n        Date: gameDate.toISOString(),\n        HomeTeam: homeTeam,\n        AwayTeam: awayTeam,\n        Stadium: homeTeam + \" Arena\",\n        HomeTeamWins: Math.floor(Math.random() * 40) + 10,\n        HomeTeamLosses: Math.floor(Math.random() * 40) + 10,\n        AwayTeamWins: Math.floor(Math.random() * 40) + 10,\n        AwayTeamLosses: Math.floor(Math.random() * 40) + 10,\n        HomeTeamPointsPerGame: 100 + Math.random() * 20,\n        HomeTeamPointsAllowedPerGame: 100 + Math.random() * 20,\n        AwayTeamPointsPerGame: 100 + Math.random() * 20,\n        AwayTeamPointsAllowedPerGame: 100 + Math.random() * 20,\n        HomeTeamInjuries: Math.floor(Math.random() * 4),\n        AwayTeamInjuries: Math.floor(Math.random() * 4),\n        OverUnderLine: 210 + Math.floor(Math.random() * 30)\n      });\n    }\n    return mockGames;\n  }\n}\n\n// Create and export the API service\nconst api = new ApiService(API_BASE_URL);\nexport default api;","map":{"version":3,"names":["API_BASE_URL","ApiService","constructor","baseUrl","fetchJson","endpoint","options","url","console","log","method","response","fetch","headers","status","statusText","ok","errorMessage","errorData","json","detail","message","e","errorText","text","textError","error","Error","data","includes","getUpcomingGames","games","Array","isArray","predictParlay","parlaySize","minConfidence","body","JSON","stringify","parlay_size","min_confidence","getParlayHistory","history","refreshData","getMockGames","teams","mockGames","today","Date","i","homeIdx","Math","floor","random","length","awayIdx","homeTeam","awayTeam","gameDate","setDate","getDate","push","GameID","toISOString","HomeTeam","AwayTeam","Stadium","HomeTeamWins","HomeTeamLosses","AwayTeamWins","AwayTeamLosses","HomeTeamPointsPerGame","HomeTeamPointsAllowedPerGame","AwayTeamPointsPerGame","AwayTeamPointsAllowedPerGame","HomeTeamInjuries","AwayTeamInjuries","OverUnderLine","api"],"sources":["C:/Users/rt/nba-parlay-predictor/frontend/src/services/api.js"],"sourcesContent":["// src/services/api.js\nconst API_BASE_URL = 'http://localhost:8000/api';\n\nclass ApiService {\n  constructor(baseUrl) {\n    this.baseUrl = baseUrl;\n  }\n\n  async fetchJson(endpoint, options = {}) {\n    const url = this.baseUrl + endpoint;\n    console.log(\"API Request: \" + (options.method || 'GET') + \" \" + url);\n    \n    try {\n      const response = await fetch(url, {\n        ...options,\n        headers: {\n          'Content-Type': 'application/json',\n          ...options.headers,\n        },\n      });\n\n      console.log(\"Response status: \" + response.status + \" \" + response.statusText);\n      \n      // For non-2xx responses, try to parse error message\n      if (!response.ok) {\n        let errorMessage = \"API Error: \" + response.status + \" \" + response.statusText;\n        \n        try {\n          const errorData = await response.json();\n          errorMessage = errorData.detail || errorData.message || errorMessage;\n        } catch (e) {\n          // If JSON parsing fails, try to get text\n          try {\n            const errorText = await response.text();\n            if (errorText) errorMessage += \" - \" + errorText;\n          } catch (textError) {\n            // Ignore text parsing errors\n          }\n        }\n        \n        console.error(errorMessage);\n        throw new Error(errorMessage);\n      }\n      \n      // For empty responses (like 204 No Content)\n      if (response.status === 204) {\n        return null;\n      }\n      \n      // Parse JSON response\n      const data = await response.json();\n      console.log('Response data:', data);\n      return data;\n    } catch (error) {\n      if (error.message.includes('Failed to fetch')) {\n        console.error(\"Network error connecting to \" + url + \". Is the server running?\");\n        throw new Error(\"Cannot connect to API server. Please check if the backend is running.\");\n      }\n      \n      console.error(\"API Error for \" + url + \":\", error);\n      throw error;\n    }\n  }\n\n  // Get upcoming games\n  async getUpcomingGames() {\n    try {\n      const games = await this.fetchJson('/games');\n      \n      // Validate that we got an array\n      if (!Array.isArray(games)) {\n        console.error('Expected games array, got:', games);\n        return []; // Return empty array as fallback\n      }\n      \n      return games;\n    } catch (error) {\n      console.error('Error getting upcoming games:', error);\n      return []; // Return empty array to prevent UI errors\n    }\n  }\n\n  // Predict optimal parlay\n  async predictParlay(parlaySize = 3, minConfidence = 0.6) {\n    try {\n      return await this.fetchJson('/predict-parlay', {\n        method: 'POST',\n        body: JSON.stringify({\n          parlay_size: parlaySize,\n          min_confidence: minConfidence,\n        }),\n      });\n    } catch (error) {\n      console.error('Error predicting parlay:', error);\n      throw error;\n    }\n  }\n\n  // Get parlay history\n  async getParlayHistory() {\n    try {\n      const history = await this.fetchJson('/parlay-history');\n      \n      // Validate that we got an array\n      if (!Array.isArray(history)) {\n        console.error('Expected history array, got:', history);\n        return []; // Return empty array as fallback\n      }\n      \n      return history;\n    } catch (error) {\n      console.error('Error getting parlay history:', error);\n      return []; // Return empty array to prevent UI errors\n    }\n  }\n\n  // Refresh data\n  async refreshData() {\n    try {\n      return await this.fetchJson('/refresh-data', {\n        method: 'POST',\n      });\n    } catch (error) {\n      console.error('Error refreshing data:', error);\n      throw error;\n    }\n  }\n\n  // Generate mock data for development/testing\n  getMockGames() {\n    console.log('Generating mock games data for development');\n    const teams = [\n      \"LAL\", \"BOS\", \"GSW\", \"MIL\", \"PHX\", \"PHI\", \"BKN\", \"DEN\",\n      \"LAC\", \"MIA\", \"DAL\", \"ATL\", \"CHI\", \"TOR\", \"CLE\", \"NYK\"\n    ];\n    \n    const mockGames = [];\n    const today = new Date();\n    \n    for (let i = 0; i < 8; i++) {\n      // Get two random different teams\n      const homeIdx = Math.floor(Math.random() * teams.length);\n      let awayIdx;\n      do {\n        awayIdx = Math.floor(Math.random() * teams.length);\n      } while (awayIdx === homeIdx);\n      \n      const homeTeam = teams[homeIdx];\n      const awayTeam = teams[awayIdx];\n      \n      // Random game date within the next week\n      const gameDate = new Date(today);\n      gameDate.setDate(today.getDate() + Math.floor(Math.random() * 7) + 1);\n      \n      mockGames.push({\n        GameID: \"mock-\" + (i + 1),\n        Date: gameDate.toISOString(),\n        HomeTeam: homeTeam,\n        AwayTeam: awayTeam,\n        Stadium: homeTeam + \" Arena\",\n        HomeTeamWins: Math.floor(Math.random() * 40) + 10,\n        HomeTeamLosses: Math.floor(Math.random() * 40) + 10,\n        AwayTeamWins: Math.floor(Math.random() * 40) + 10,\n        AwayTeamLosses: Math.floor(Math.random() * 40) + 10,\n        HomeTeamPointsPerGame: 100 + Math.random() * 20,\n        HomeTeamPointsAllowedPerGame: 100 + Math.random() * 20,\n        AwayTeamPointsPerGame: 100 + Math.random() * 20,\n        AwayTeamPointsAllowedPerGame: 100 + Math.random() * 20,\n        HomeTeamInjuries: Math.floor(Math.random() * 4),\n        AwayTeamInjuries: Math.floor(Math.random() * 4),\n        OverUnderLine: 210 + Math.floor(Math.random() * 30)\n      });\n    }\n    \n    return mockGames;\n  }\n}\n\n// Create and export the API service\nconst api = new ApiService(API_BASE_URL);\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}